# Express.js Modular Boilerplate

A clean and scalable Express.js boilerplate using best practices:

## ðŸ—‚ Folder Structure

```
express-app/
â”œâ”€â”€ www                   # Startup script
â”œâ”€â”€ config/               # Configuration files
â”‚   â”œâ”€â”€ db.js
â”‚   â”œâ”€â”€ middleware.js
â”‚   â”œâ”€â”€ SuperTokens.js
â”‚   â””â”€â”€ viewEngine.js
â”œâ”€â”€ controllers/          # Request handlers
â”œâ”€â”€ docs/                 # Documentation files
â”œâ”€â”€ jobs/                 # Scheduled/cron jobs
â”œâ”€â”€ middlewares/          # Custom middleware
â”‚   â””â”€â”€ errorHandlers.js
â”œâ”€â”€ models/               # DB models
â”œâ”€â”€ node_modules/
â”œâ”€â”€ public/               # Static files
â”œâ”€â”€ stylesheets/          # CSS styles
â”‚   â””â”€â”€ style.css
â”œâ”€â”€ routes/               # Express route definitions
â”‚   â”œâ”€â”€ indexRoutes.js
â”‚   â””â”€â”€ usersRoutes.js
â”œâ”€â”€ scripts/              # Utility scripts
â”œâ”€â”€ services/             # Business logic
â”‚   â””â”€â”€ userService.js
â”œâ”€â”€ tests/                # Test files
â”œâ”€â”€ utils/                # Reusable utilities
â”‚   â””â”€â”€ tenantDbClient.js
â”œâ”€â”€ validators/           # Validation logic
â”œâ”€â”€ .env                  # Environment variables
â”œâ”€â”€ .gitignore
â”œâ”€â”€ app.js                # Express app configuration
â”œâ”€â”€ docker-compose.yml    # Docker compose file
â”œâ”€â”€ Dockerfile            # Docker configuration
â”œâ”€â”€ package-lock.json
â”œâ”€â”€ package.json
â””â”€â”€ README.md
```

## ðŸš€ Getting Started

1. **Clone the repo**  
```bash
git clone https://github.com/gernesto14/express-boilerplate.git
cd express-boilerplate
```

2. **Install dependencies**  
```bash
npm install
```

3. **Configure `.env`**  
```env
PORT=3000
DB_NAME=your_db
DB_USER=your_user
DB_PASS=your_password
DB_HOST=localhost
```

4. **Run the app**  
```bash
npm start
```

## âœ… Features

- Clean controller/service separation
- Centralized error handling
- Modular middlewares and routes
- PostgreSQL with pg or Sequelize
- ES module support
- Static files served from `/public`
- Docker-ready deployment
- View engine and styles support

## ðŸ“¦ Scripts in `package.json`

```json
"scripts": {
  "start": "node ./www",
  "dev": "nodemon ./www"
}
```

## ðŸ§ª Testing (Optional)
Add tests under `/tests` using Jest, Supertest, etc.

## ðŸ“„ Documentation
Place API specs, Swagger docs, or architecture notes inside `/docs`.

## ðŸ”§ Customization
Use `/utils`, `/scripts`, `/jobs`, or `/validators` to extend the app's capabilities.
